;;-*-Scheme-*-
;; dbd_pglib.stub - PostgreSQL API
;;
;;  Copyright (c) 2003-2005 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003-2005 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: dbd_pglib.stub,v 1.1 2005/09/02 13:12:32 shiro Exp $

"
#include \"dbd_pg.h\"
"

;; ConnStatusType from libpq-fe.h
(define-enum CONNECTION_OK)
(define-enum CONNECTION_BAD)
(define-enum CONNECTION_STARTED)
(define-enum CONNECTION_MADE)
(define-enum CONNECTION_AWAITING_RESPONSE)
(define-enum CONNECTION_AUTH_OK)
(define-enum CONNECTION_SETENV)
(define-enum CONNECTION_SSL_STARTUP)
(define-enum CONNECTION_NEEDED)

(define-type <pg-conn> "PGconn*" "PostgreSQL Connection"
  "PG_CONN_P" "PG_CONN_UNBOX" "PG_CONN_BOX")
(define-type <pg-result> "PGresult*" "PostgreSQL Result"
  "PG_RESULT_P" "PG_RESULT_UNBOX" "PG_RESULT_BOX")

;; ExecStatusType from libpq-fe.h
(define-enum PGRES_EMPTY_QUERY)
(define-enum PGRES_COMMAND_OK)
(define-enum PGRES_TUPLES_OK)
(define-enum PGRES_COPY_OUT)
(define-enum PGRES_COPY_IN)
(define-enum PGRES_BAD_RESPONSE)
(define-enum PGRES_NONFATAL_ERROR)
(define-enum PGRES_FATAL_ERROR)

;; Connection
(define-cproc pq-connectdb (conninfo::<const-cstring>)
  (call <pg-conn> "PQconnectdb"))
(define-cproc pq-finish (conn::<pg-conn>) (call <void> "PQfinish"))
(define-cproc pq-reset (conn::<pg-conn>)  (call <void> "PQreset"))

(define-cproc pq-db (conn::<pg-conn>)   (call <const-cstring> "PQdb"))
(define-cproc pq-user (conn::<pg-conn>) (call <const-cstring> "PQuser"))
(define-cproc pq-pass (conn::<pg-conn>) (call <const-cstring> "PQpass"))
(define-cproc pq-host (conn::<pg-conn>) (call <const-cstring> "PQhost"))
(define-cproc pq-port (conn::<pg-conn>) (call <const-cstring> "PQport"))
(define-cproc pq-tty (conn::<pg-conn>)  (call <const-cstring> "PQtty"))
(define-cproc pq-options (conn::<pg-conn>) (call <const-cstring> "PQoptions"))
(define-cproc pq-status (conn::<pg-conn>) (call <int> "PQstatus"))

(define-cproc pq-error-message (conn::<pg-conn>)
  (call <const-cstring> "PQerrorMessage"))
(define-cproc pq-backend-pid (conn::<pg-conn>)
  (call <int> "PQbackendPID"))


;; Query
(define-cproc pq-exec (conn::<pg-conn> query::<const-cstring>)
  (call <pg-result> "PQexec"))

(define-cproc pq-result-status (result::<pg-result>)
  (call <int> "PQresultStatus"))
(define-cproc pq-res-status (status::<int>)
  (call <const-cstring> "PQresStatus"))
(define-cproc pq-result-error-message (result::<pg-result>)
  (call <const-cstring> "PQresultErrorMessage"))

(define-cproc pq-ntuples (result::<pg-result>)
  (call <int> "PQntuples"))
(define-cproc pq-nfields (result::<pg-result>)
  (call <int> "PQnfields"))
(define-cproc pq-fname (result::<pg-result> index::<int>)
  (call <const-cstring> "PQfname"))
(define-cproc pq-fnumber (result::<pg-result> fname::<const-cstring>)
  (call <int> "PQfnumber"))
(define-cproc pq-ftype (result::<pg-result> index::<int>)
  (call <int> "PQftype"))
(define-cproc pq-fsize (result::<pg-result> index::<int>)
  (call <int> "PQfsize"))
(define-cproc pq-fmod (result::<pg-result> index::<int>)
  (call <int> "PQfmod"))
(define-cproc pq-binary-tuples (result::<pg-result>)
  (call <boolean> "PQbinaryTuples"))

(define-cproc pq-getvalue (result::<pg-result> row_id::<int> col_id::<int>)
  ;; the result may be binary, so we use explicit length.
  (body "char *val; int len;"
        "val = PQgetvalue(result, row_id, col_id);"
        "len = PQgetlength(result, row_id, col_id);"
        "SCM_RESULT = Scm_MakeString(val, len, -1, SCM_MAKSTR_COPYING);"))

(define-cproc pq-getisnull (result::<pg-result> row_id::<int> col_id::<int>)
  (call <boolean> "PQgetisnull"))

(define-cproc pq-cmd-status (result::<pg-result>)
  (call <const-cstring> "PQcmdStatus"))
(define-cproc pq-cmd-tuples (result::<pg-result>)
  (call <const-cstring> "PQcmdTuples"))
(define-cproc pq-oid-status (result::<pg-result>)
  (call <const-cstring> "PQoidStatus"))

(define-cproc pq-clear (result::<pg-result>)
  (call <void> "PQclear"))

